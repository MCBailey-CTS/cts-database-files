
  ExportStrip
    __work_part_.Layers.SetState(1, State.WorkLayer);

 for (int i = 2; i <= 256; i++)
     __work_part_.Layers.SetState(i, State.Hidden);

 new[] { 6, 10, 200, 201, 202, 254 }.ToList()
     .ForEach(i => __work_part_.Layers.SetState(i, State.Selectable));

       public static void ExportStripStp(string outgoingFolderName)
  {
      string outputPath = $"{outgoingFolderName}\\{session_.Parts.Work.Leaf}-{TodaysDate}.stp";

      StepCreator step = session_.DexManager.CreateStepCreator();

      using (session_.__UsingBuilderDestroyer(step))
      {
          step.ExportDestination = BaseCreator.ExportDestinationOption.NativeFileSystem;

          step.SettingsFile = "U:\\nxFiles\\Step Translator\\ExternalStep_AllLayers.def";

          step.ExportAs = StepCreator.ExportAsOption.Ap214;

          step.InputFile = session_.Parts.Work.FullPath;

          step.OutputFile = outputPath;

          step.ProcessHoldFlag = true;

          step.Commit();
      }

      print(File.Exists(outputPath)
          ? $"Successfully created \"{outputPath}\"."
          : $"Did not successfully create \"{outputPath}\".");
  }

  public static void ExportStripPdf(string partPath, string drawingSheetName, string filePath)
  {
      string directory = Path.GetDirectoryName(filePath);


      if (!filePath.EndsWith(".pdf"))
          throw new Exception("File path for PDF must end with \".pdf\".");

      if (File.Exists(filePath))
          throw new Exception($"PDF '{filePath}' already exists.");

      Part part = session_.__FindOrOpen(partPath);

      //We can use SingleOrDefault here because NX will prevent the naming of two drawing sheets the exact same string.
      DrawingSheet sheet = part.DrawingSheets
                               .ToArray()
                               .SingleOrDefault(drawingSheet => drawingSheet.Name == drawingSheetName)
                           ??
                           throw new Exception(
                               $@"Part '{partPath}' does not have a sheet named '{drawingSheetName}'.");

      __display_part_ = part;
      __work_part_ = __display_part_;

      PrintPDFBuilder pdfBuilder = part.PlotManager.CreatePrintPdfbuilder();

      using (session_.__UsingBuilderDestroyer(pdfBuilder))
      {
          pdfBuilder.Scale = 1.0;
          pdfBuilder.Size = PrintPDFBuilder.SizeOption.ScaleFactor;
          pdfBuilder.OutputText = PrintPDFBuilder.OutputTextOption.Polylines;
          pdfBuilder.Units = PrintPDFBuilder.UnitsOption.English;
          pdfBuilder.XDimension = 8.5;
          pdfBuilder.YDimension = 11.0;
          pdfBuilder.RasterImages = true;
          pdfBuilder.Colors = PrintPDFBuilder.Color.AsDisplayed;
          pdfBuilder.Watermark = "";
          UFSession.GetUFSession().Draw.IsObjectOutOfDate(sheet.Tag, out bool flag);
          if (flag)
          {
              UFSession.GetUFSession().Draw.UpdOutOfDateViews(sheet.Tag);
              part.__Save();
          }

          sheet.Open();
          pdfBuilder.SourceBuilder.SetSheets(new NXObject[] { sheet });
          pdfBuilder.Filename = filePath;
          pdfBuilder.Commit();
      }
  }


   public static void ExportStripPrintDrawing(int copies)
 {
     if (copies == 0)
         return;

     Part _WorkPart = Session.GetSession().Parts.Work;

     UFSession TheUFSession = UFSession.GetUFSession();

     //session_.Execute(@"C:\Repos\NXJournals\JOURNALS\export_strip.py", "ExportStrip", "print_drawing_sheet", new object[] { copies });
     PrintBuilder printBuilder1 = _WorkPart.PlotManager.CreatePrintBuilder();

     try
     {
         printBuilder1.ThinWidth = 1.0;
         printBuilder1.NormalWidth = 2.0;
         printBuilder1.ThickWidth = 3.0;
         printBuilder1.Copies = copies;
         printBuilder1.RasterImages = true;
         printBuilder1.Output = PrintBuilder.OutputOption.WireframeBlackWhite;
         DrawingSheet[] sheets = _WorkPart.DrawingSheets.ToArray();
         switch (sheets.Length)
         {
             case 0:
                 print("Current work part doesn't not have a sheet to print.");
                 return;
             case 1:
                 session_.ApplicationSwitchImmediate("UG_APP_DRAFTING");
                 sheets[0].Open();
                 TheUFSession.Draw.IsObjectOutOfDate(sheets[0].Tag, out bool outOfDate);
                 if (outOfDate)
                     try
                     {
                         TheUFSession.Draw.UpdOutOfDateViews(sheets[0].Tag);
                         sheets[0].OwningPart.Save(BasePart.SaveComponents.True, BasePart.CloseAfterSave.False);
                     }
                     catch (Exception ex)
                     {
                         ex.__PrintException();
                     }

                 printBuilder1.SourceBuilder.SetSheets(new NXObject[] { sheets[0] });
                 break;
             default:
                 print("Current work part contains more than 1 sheet.");
                 return;
         }

         printBuilder1.PrinterText = "\\\\ctsfps1.cts.toolingsystemsgroup.com\\CTS Office MFC";
         printBuilder1.Orientation = PrintBuilder.OrientationOption.Landscape;
         printBuilder1.Paper = PrintBuilder.PaperSize.Inch11x17;
         printBuilder1.Commit();
     }
     finally
     {
         printBuilder1.Destroy();
     }
 }