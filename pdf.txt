

  public static void Pdf(Part part, string drawingSheetName, string filePath)
  {
      string directory = Path.GetDirectoryName(filePath);

      if (!filePath.EndsWith(".pdf"))
          throw new InvalidOperationException("File path for PDF must end with \".pdf\".");

      if (File.Exists(filePath))
          throw new ArgumentOutOfRangeException("output_path", "PDF \"" + filePath + "\" already exists.");

      //We can use SingleOrDefault here because NX will prevent the naming of two drawing sheets the exact same string.
      DrawingSheet sheet = part.DrawingSheets
                               .ToArray()
                               .SingleOrDefault(drawingSheet => drawingSheet.Name == drawingSheetName)
                           ??
                           throw new ArgumentException(
                               $@"Part ""{part.Leaf}"" does not have a sheet named ""{drawingSheetName}"".",
                               "drawingSheetName");

      __display_part_ = part;
      session_.__SetDisplayToWork();
      SetLayers();

      PrintPDFBuilder pdfBuilder = part.PlotManager.CreatePrintPdfbuilder();

      using (session_.__UsingBuilderDestroyer(pdfBuilder))
      {
          pdfBuilder.Scale = 1.0;
          pdfBuilder.Size = PrintPDFBuilder.SizeOption.ScaleFactor;
          pdfBuilder.OutputText = PrintPDFBuilder.OutputTextOption.Polylines;
          pdfBuilder.Units = PrintPDFBuilder.UnitsOption.English;
          pdfBuilder.XDimension = 8.5;
          pdfBuilder.YDimension = 11.0;
          pdfBuilder.RasterImages = true;
          pdfBuilder.Colors = PrintPDFBuilder.Color.BlackOnWhite;
          pdfBuilder.Watermark = "";
          UFSession.GetUFSession().Draw.IsObjectOutOfDate(sheet.Tag, out bool flag);

          if (flag)
          {
              UFSession.GetUFSession().Draw.UpdOutOfDateViews(sheet.Tag);
              part.__Save();
          }
          
          sheet.Open();
          pdfBuilder.SourceBuilder.SetSheets(new NXObject[] { sheet });
          pdfBuilder.Filename = filePath;
          pdfBuilder.Commit();
      }
  }




  public static void ExportStripPdf(string partPath, string drawingSheetName, string filePath)
  {
      string directory = Path.GetDirectoryName(filePath);


      if (!filePath.EndsWith(".pdf"))
          throw new Exception("File path for PDF must end with \".pdf\".");

      if (File.Exists(filePath))
          throw new Exception($"PDF '{filePath}' already exists.");

      Part part = session_.__FindOrOpen(partPath);

      //We can use SingleOrDefault here because NX will prevent the naming of two drawing sheets the exact same string.
      DrawingSheet sheet = part.DrawingSheets
                               .ToArray()
                               .SingleOrDefault(drawingSheet => drawingSheet.Name == drawingSheetName)
                           ??
                           throw new Exception(
                               $@"Part '{partPath}' does not have a sheet named '{drawingSheetName}'.");

      __display_part_ = part;
      __work_part_ = __display_part_;

      PrintPDFBuilder pdfBuilder = part.PlotManager.CreatePrintPdfbuilder();

      using (session_.__UsingBuilderDestroyer(pdfBuilder))
      {
          pdfBuilder.Scale = 1.0;
          pdfBuilder.Size = PrintPDFBuilder.SizeOption.ScaleFactor;
          pdfBuilder.OutputText = PrintPDFBuilder.OutputTextOption.Polylines;
          pdfBuilder.Units = PrintPDFBuilder.UnitsOption.English;
          pdfBuilder.XDimension = 8.5;
          pdfBuilder.YDimension = 11.0;
          pdfBuilder.RasterImages = true;
          pdfBuilder.Colors = PrintPDFBuilder.Color.AsDisplayed;
          pdfBuilder.Watermark = "";
          UFSession.GetUFSession().Draw.IsObjectOutOfDate(sheet.Tag, out bool flag);
          if (flag)
          {
              UFSession.GetUFSession().Draw.UpdOutOfDateViews(sheet.Tag);
              part.__Save();
          }

          sheet.Open();
          pdfBuilder.SourceBuilder.SetSheets(new NXObject[] { sheet });
          pdfBuilder.Filename = filePath;
          pdfBuilder.Commit();
      }
  }