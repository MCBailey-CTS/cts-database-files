insert into ConceptControlFile 
values



:DESCRIPTION_TITLES
DESCRIPTION'),
:END:

:DESCRIPTION_IGNORE_VALUES:
(\d+\.\d+)|(\d+\.)|(\.\d+)'),
:END:

:SIZE_TITLES:
DESCRIPTION'),
:END:


//(\d+)(?<=(\d+))

//\s*see[-_ ]?3d[-_ ]?data\s*




:DOUBLE_DECIMAL_REGEX:
(\d+\.?\d*|\.\d*)'),
:END:

// The difference between this and "DOUBLE_DECIMAL_REGEX" is that this won't match integers.
// It requires that a decimal must be present in the number in order to match.
:DOUBLE_DECIMAL_REQUIRE_PERIOD_REGEX:
(\d+\.\d*|\.\d*)'),

('SIZE_DESCRIPTION_IGNORE_PATHS_REGEX', '^G:\\0Library\\.*\.prt$'),
('SIZE_DESCRIPTION_IGNORE_PATHS_REGEX', '^W:\\.*\.prt$'),

('CBORE_DEPTH_MATCH_PATHS_REGEX', '[0-9]{4,}-[0-9]{3}-[0-9]{3}'),
('DETAIL_STRUCTURE_REGEX', '[0-9]{4,}-[0-9]{3}-[0-9]{3}'),


('', ''),
:INTERPART_EXPRESSIONS_GFOLDER_REGEX_MATCH:
\\([0-9]{1,}) \([a-z]{1,}-[0-9]{1,}\)\\.*\.prt$'),
:END:


:GuideBushings_GuidePins_Titles:
LibraryPath'),
:END:

:GuideBushings_GuidePins_Values:
GuideBushings'),
GuidePins'),
:END:




:CBORE_DEPTH_TITLES_1:
MATERIAL'),
:END:

:SIZE_DESCRIPTION_TITLES_1:
MATERIAL'),
:END:

:CASTING_MATERIALS_TITLES:
MATERIAL'),
:END:



///////////////////////////////////////


('DrawDie_', ''),
:SMART_KEY_SEED_FILE:
G:\0Library\Keys\Smart Key Metric.prt
:END:

('DrawDie_', ''),
:SMART_MISUMI_NEST_GAUGES:
G:\0Library\Gauges\Misumi\Smart Misumi-nest-gauges.prt
:END:

('DrawDie_', ''),
:SEED_PART:
G:\0Library\SeedFiles\Components\seed-base.prt
:END:

:REFERENCE_BOOLEANS:
// Subtract, Intersect, Unite
{UPPER_CAVITY},{^OP(\s*|-|_)020(\s*|-|_)UPR(\s*|-|_)3D$},{Subtract},{0}
{LOWER_BINDER},{^OP(\s*|-|_)020(\s*|-|_)LWR(\s*|-|_)3D$},{Subtract},{0}
{LOWER_BINDER},{^OP(\s*|-|_)020(\s*|-|_)PAD(\s*|-|_)PROFILE$},{Subtract},{0}
{LOWER_BINDER},{^OP(\s*|-|_)020(\s*|-|_)BINDER(\s*|-|_)3D(.*)WITH(\s*|-|_)PROFILE$},{Subtract},{1}
{LOWER_POST},{^OP(\s*|-|_)020(\s*|-|_)LWR(\s*|-|_)3D$},{Subtract},{0}
{LOWER_POST},{^OP(\s*|-|_)020(\s*|-|_)LWR(\s*|-|_)PROFILE$},{Intersect},{0}
{LOWER_POST},{^OP(\s*|-|_)\d{3}(\s*|-|_)LWR(\s*|-|_)3D(.*)WITH(\s*|-|_)PROFILE$},{Subtract},{1}
:END:
('DrawDie_', ''),
:STRIP_CONTROL_MATERIAL_TITLE:
M
:END:
///////////////////////////////////////

///////////////////////////////////////




//([0-9]\.[0-9]*)

//:DOUBLE_DECIMAL_REQUIRE_PERIOD_REGEX:
//(\d+\.\d*|\.\d*)
//:END:

:SIZE_DESCRIPTION_REGEX:
([0-9]*\.[0-9]{2,3}).*\s*X\s*([0-9]*\.[0-9]{2,3}).*\s*X\s*([0-9]*\.[0-9]{2,3}).*'),
:END:

:SIZE_DESCRIPTION_BURN_REGEX:
//^Burn\s*(?<BurnHeight>\d+\.?\d*)
^Burn\s*(?<BurnHeight>(\d+\.\d+)|(\d+\.)|(\.\d+))'),
:END:




/////////////////////////////



/////////////////////////////


////////////////////////////////////


////////////////////////////////////

/////////////////////////////////////////
AddFastenersMetricCycleAdd

30

G:\0Library\Fasteners\Metric\SocketHeadCapScrews\004.prt
G:\0Library\Fasteners\Metric\Dowels\6mm-dwl-020.prt
G:\0Library\Fasteners\Metric\Dowels\6mm-dwl-050.prt
G:\0Library\Fasteners\Metric\\6mm-jck-screw-tsg.prt

G:\0Library\Fasteners\Metric\SocketHeadCapScrews\005
G:\0Library\Fasteners\Metric\Dowels\6mm-dwl-020.prt
G:\0Library\Fasteners\Metric\Dowels\6mm-dwl-050.prt
G:\0Library\Fasteners\Metric\JackScrews\6mm-jck-screw-tsg.prt

G:\0Library\Fasteners\Metric\SocketHeadCapScrews\006
G:\0Library\Fasteners\Metric\Dowels\6mm-dwl-020.prt
G:\0Library\Fasteners\Metric\Dowels\6mm-dwl-050.prt
G:\0Library\Fasteners\Metric\JackScrews\6mm-jck-screw-tsg.prt

G:\0Library\Fasteners\Metric\SocketHeadCapScrews\008
G:\0Library\Fasteners\Metric\Dowels\8mm-dwl-025.prt
G:\0Library\Fasteners\Metric\Dowels\8mm-dwl-050.prt
G:\0Library\Fasteners\Metric\JackScrews\8mm-jck-screw-tsg.prt

G:\0Library\Fasteners\Metric\SocketHeadCapScrews\010
G:\0Library\Fasteners\Metric\SocketHeadCapScrews\10mm-dwl-025.prt
G:\0Library\Fasteners\Metric\SocketHeadCapScrews\10mm-dwl-050.prt
G:\0Library\Fasteners\Metric\JackScrews\10mm-jck-screw-tsg.prt

G:\0Library\Fasteners\Metric\SocketHeadCapScrews\012
G:\0Library\Fasteners\Metric\Dowels\12mm-dwl-025.prt
G:\0Library\Fasteners\Metric\Dowels\12mm-dwl-050.prt
G:\0Library\Fasteners\Metric\JackScrews\12mm-jck-screw-tsg.prt

G:\0Library\Fasteners\Metric\SocketHeadCapScrews\016
G:\0Library\Fasteners\Metric\Dowels\16mm-dwl-050.prt
G:\0Library\Fasteners\Metric\Dowels\16mm-dwl-050.prt
G:\0Library\Fasteners\Metric\JackScrews\12mm-jck-screw-tsg

G:\0Library\Fasteners\Metric\SocketHeadCapScrews\020
G:\0Library\Fasteners\Metric\Dowels\20mm-dwl-050.prt
G:\0Library\Fasteners\Metric\Dowels\20mm-dwl-050.prt
G:\0Library\Fasteners\Metric\JackScrews\12mm-jck-screw-tsg.prt

G:\0Library\Fasteners\Metric\SocketHeadCapScrews\024
G:\0Library\Fasteners\Metric\Dowels\24mm-dwl-050.prt
G:\0Library\Fasteners\Metric\Dowels\24mm-dwl-050.prt
G:\0Library\Fasteners\Metric\JackScrews\12mm-jck-screw-tsg.prt

G:\0Library\Fasteners\Metric\SocketHeadCapScrews\030
G:\0Library\Fasteners\Metric\Dowels\24mm-dwl-050.prt
G:\0Library\Fasteners\Metric\Dowels\24mm-dwl-050.prt
G:\0Library\Fasteners\Metric\JackScrews\12mm-jck-screw-tsg.prt

G:\0Library\Fasteners\Metric\SocketHeadCapScrews\036
G:\0Library\Fasteners\Metric\Dowels\24mm-dwl-050.prt
G:\0Library\Fasteners\Metric\Dowels\24mm-dwl-050.prt
G:\0Library\Fasteners\Metric\JackScrews\12mm-jck-screw-tsg.prt
//////////////////////////////

//////////////////////////
AddFastenersGridSpacing

// {Actual spacing} {Display in grid spacing cmb box}
0.000 Off
0.0625 0.0625
0.125 0.125
0.250 0.250
0.500 0.500
0.750 0.750
1.000 1.000
4.000 4.000
6.000 6.000
10.000 10.000
////////////////////////////////

//////////////////////////////////
AddFastenersEnglishCycleAdd

125
G:\0Library\Fasteners\English\SocketHeadCapScrews\0006
G:\0Library\Fasteners\English\0250-dwl-100.prt
G:\0Library\Fasteners\English\0250-dwl-200.prt
G:\0Library\Fasteners\English\_0250-jck-screw-tsg.prt

G:\0Library\Fasteners\English\SocketHeadCapScrews\0008
G:\0Library\Fasteners\English\0250-dwl-100.prt
G:\0Library\Fasteners\English\0250-dwl-200.prt
G:\0Library\Fasteners\English\_0250-jck-screw-tsg.prt

G:\0Library\Fasteners\English\SocketHeadCapScrews\0010
G:\0Library\Fasteners\English\Dowels\0250-dwl-100.prt
G:\0Library\Fasteners\English\Dowels\0250-dwl-200.prt
G:\0Library\Fasteners\English\JackScrews\_0250-jck-screw-tsg.prt

G:\0Library\Fasteners\English\SocketHeadCapScrews\0250
G:\0Library\Fasteners\English\Dowels\0250-dwl-100.prt
G:\0Library\Fasteners\English\Dowels\0250-dwl-200.prt
G:\0Library\Fasteners\English\JackScrews\_0250-jck-screw-tsg.prt

G:\0Library\Fasteners\English\SocketHeadCapScrews\0313
G:\0Library\Fasteners\English\Dowels\0313-dwl-100.prt
G:\0Library\Fasteners\English\Dowels\0313-dwl-200.prt
G:\0Library\Fasteners\English\JackScrews\_0313-jck-screw-tsg.prt

G:\0Library\Fasteners\English\SocketHeadCapScrews\0375
G:\0Library\Fasteners\English\Dowels\0375-dwl-100.prt
G:\0Library\Fasteners\English\Dowels\0375-dwl-200.prt
G:\0Library\Fasteners\English\JackScrews\_0375-jck-screw-tsg.prt

G:\0Library\Fasteners\English\SocketHeadCapScrews\0500
G:\0Library\Fasteners\English\Dowels\0500-dwl-100.prt
G:\0Library\Fasteners\English\Dowels\0500-dwl-200.prt
G:\0Library\Fasteners\English\JackScrews\_0500-jck-screw-tsg.prt

G:\0Library\Fasteners\English\SocketHeadCapScrews\0625
G:\0Library\Fasteners\English\Dowels\0625-dwl-100.prt
G:\0Library\Fasteners\English\Dowels\0625-dwl-200.prt
G:\0Library\Fasteners\English\JackScrews\_0500-jck-screw-tsg.prt

G:\0Library\Fasteners\English\SocketHeadCapScrews\0750
G:\0Library\Fasteners\English\Dowels\0750-dwl-100.prt
G:\0Library\Fasteners\English\Dowels\0750-dwl-200.prt
G:\0Library\Fasteners\English\JackScrews\_0500-jck-screw-tsg.prt

G:\0Library\Fasteners\English\SocketHeadCapScrews\0875
G:\0Library\Fasteners\English\Dowels\0750-dwl-100.prt
G:\0Library\Fasteners\English\Dowels\0750-dwl-200.prt
G:\0Library\Fasteners\English\JackScrews\_0500-jck-screw-tsg.prt

G:\0Library\Fasteners\English\SocketHeadCapScrews\1000
G:\0Library\Fasteners\English\Dowels\1000-dwl-100.prt
G:\0Library\Fasteners\English\Dowels\1000-dwl-200.prt
G:\0Library\Fasteners\English\JackScrews\_0500-jck-screw-tsg.prt

G:\0Library\Fasteners\English\SocketHeadCapScrews\1250
G:\0Library\Fasteners\English\Dowels\1000-dwl-100.prt
G:\0Library\Fasteners\English\Dowels\1000-dwl-200.prt
G:\0Library\Fasteners\English\JackScrews\_0500-jck-screw-tsg.prt

G:\0Library\Fasteners\English\SocketHeadCapScrews\1500
G:\0Library\Fasteners\English\Dowels\1000-dwl-100.prt
G:\0Library\Fasteners\English\Dowels\1000-dwl-200.prt
G:\0Library\Fasteners\English\JackScrews\_0500-jck-screw-tsg.prt
//////////////////////////////////
										
																																							
																																				
 public const string _printerCts = "\\\\ctsfps1.cts.toolingsystemsgroup.com\\CTS Office MFC";

 public static readonly int[] Layers = { 1, 94, 100, 111, 200, 230 };

public static void CreateCasting(Part part, GFolder folder)
{
    StepCreator stepCreator1;
    stepCreator1 = theSession.DexManager.CreateStepCreator();
    stepCreator1.ExportAs = StepCreator.ExportAsOption.Ap214;
    stepCreator1.BsplineTol = 0.001;
    stepCreator1.SettingsFile = "C:\\Program Files\\Siemens\\NX1899\\step214ug\\ugstep214.def";
    stepCreator1.BsplineTol = 0.001;
    stepCreator1.InputFile = part.FullPath;
    theSession.SetUndoMarkName(markId1, "Export STEP File Dialog");
    Session.UndoMarkId markId2;
    markId2 = theSession.SetUndoMark(Session.MarkVisibility.Invisible, "Export STEP File");
    theSession.DeleteUndoMark(markId2, null);
    Session.UndoMarkId markId3;
    markId3 = theSession.SetUndoMark(Session.MarkVisibility.Invisible, "Export STEP File");
    stepCreator1.OutputFile = step_path;
    stepCreator1.FileSaveFlag = false;
    stepCreator1.LayerMask = "1,96";
    stepCreator1.ProcessHoldFlag = true;
    NXObject nXObject1;
    nXObject1 = stepCreator1.Commit();
    theSession.DeleteUndoMark(markId3, null);
    theSession.SetUndoMarkName(markId1, "Export STEP File");
    stepCreator1.Destroy();
}

  public static void Print4Views(IEnumerable<Part> allParts)
  {
      try
      {
          bool IsNotAssembly(Part part)
          {
              string name = Path.GetFileNameWithoutExtension(part.FullPath);

              if (name == null)
                  return false;

              name = name.ToLower();

              if (name.EndsWith("000") || name.EndsWith("lsh") || name.EndsWith("ush") || name.EndsWith("lwr") ||
                  name.EndsWith("upr"))
                  return false;

              return !name.Contains("lsp") && !name.Contains("usp");
          }

          List<Part> parts = allParts
              .Where(part => Regex.IsMatch(part.Leaf, RegexDetail, RegexOptions.IgnoreCase))
              .Where(IsNotAssembly)
              .Where(part => part.DraftingDrawingSheets.ToArray().Any(__d => __d.Name.ToUpper() == "4-VIEW"))
              .ToList();

          parts.Sort((part1, part2) => string.Compare(part1.Leaf, part2.Leaf, StringComparison.Ordinal));

          for (int i = 0; i < parts.Count; i++)
          {
              Part part = parts[i];

              TheUFSession.Ui.SetPrompt($"{i + 1} of {parts.Count}. Printing 4-VIEW of {part.Leaf}.");

              __display_part_ = part;

              __work_part_ = __display_part_;

              PrintBuilder printBuilder = __work_part_.PlotManager.CreatePrintBuilder();

              using (new Destroyer(printBuilder))
              {
                  printBuilder.Copies = 1;

                  printBuilder.ThinWidth = 1.0;

                  printBuilder.NormalWidth = 2.0;

                  printBuilder.ThickWidth = 3.0;

                  printBuilder.Output = PrintBuilder.OutputOption.WireframeBlackWhite;

                  printBuilder.ShadedGeometry = true;

                  DrawingSheet drawingSheet = __work_part_.DraftingDrawingSheets.FindObject("4-VIEW");

                  drawingSheet.Open();

                  printBuilder.SourceBuilder.SetSheets(new NXObject[] { drawingSheet });

                  printBuilder.PrinterText = "\\\\ctsfps1.cts.toolingsystemsgroup.com\\CTS Office MFC";

                  printBuilder.Orientation = PrintBuilder.OrientationOption.Landscape;

                  printBuilder.Paper = PrintBuilder.PaperSize.Letter;

                  printBuilder.Commit();
              }
          }
      }
      catch (Exception ex)
      {
          ex.__PrintException();
      }
  }

public static void Stp(string partPath, string output_path, string settings_file)
   {
       if (!output_path.EndsWith(".stp"))
           throw new InvalidOperationException("File path for STP must end with \".stp\".");

       if (File.Exists(output_path))
           throw new ArgumentOutOfRangeException("output_path", "STP \"" + output_path + "\" already exists.");

       if (!File.Exists(partPath))
           throw new FileNotFoundException("Could not find file location \"" + partPath + "\".");

       session_.__FindOrOpen(partPath);

       StepCreator stepCreator = Session.GetSession().DexManager.CreateStepCreator();

       using (session_.__UsingBuilderDestroyer(stepCreator))
       {
           stepCreator.ExportAs = StepCreator.ExportAsOption.Ap214;
           stepCreator.SettingsFile = settings_file;
           stepCreator.ObjectTypes.Solids = true;
           stepCreator.OutputFile = output_path;
           stepCreator.BsplineTol = 0.0254;
           stepCreator.ObjectTypes.Annotations = true;
           stepCreator.ExportFrom = StepCreator.ExportFromOption.ExistingPart;
           stepCreator.InputFile = partPath;
           stepCreator.FileSaveFlag = false;
           stepCreator.LayerMask = "1, 96";
           stepCreator.ProcessHoldFlag = true;
           stepCreator.Commit();
       }

       string switchFilePath = output_path.Replace(".stp", ".log");

       if (File.Exists(switchFilePath))
           File.Delete(switchFilePath);
   }

   public static void Dwg(string partPath, string drawingSheetName, string filePath)
{
    string directory = Path.GetDirectoryName(filePath);

    if (File.Exists(filePath))
        throw new ArgumentOutOfRangeException("output_path", "DWG \"" + filePath + "\" already exists.");

    Part part = session_.__FindOrOpen(partPath);

    DrawingSheet sheet = part.DrawingSheets
                             .ToArray()
                             .SingleOrDefault(drawingSheet => drawingSheet.Name == drawingSheetName)
                         ??
                         throw new ArgumentException(
                             $"Part \"{part.Leaf}\" does not have a sheet named \"{drawingSheetName}\".",
                             "drawingSheetName");

    UFSession.GetUFSession().Draw.IsObjectOutOfDate(sheet.Tag, out bool flag);

    if (flag)
    {
        SetLayers();
        UFSession.GetUFSession().Draw.UpdOutOfDateViews(sheet.Tag);
        part.__Save();
    }

    DxfdwgCreator dxfdwgCreator1 = session_.DexManager.CreateDxfdwgCreator();
    using (session_.__UsingBuilderDestroyer(dxfdwgCreator1))
    {
        dxfdwgCreator1.ExportData = DxfdwgCreator.ExportDataOption.Drawing;
        dxfdwgCreator1.AutoCADRevision = DxfdwgCreator.AutoCADRevisionOptions.R2004;
        dxfdwgCreator1.ViewEditMode = true;
        dxfdwgCreator1.FlattenAssembly = true;
        dxfdwgCreator1.SettingsFile = "C:\\Program Files\\Siemens\\NX 11.0\\dxfdwg\\dxfdwg.def";
        dxfdwgCreator1.ExportFrom = DxfdwgCreator.ExportFromOption.ExistingPart;
        dxfdwgCreator1.OutputFileType = DxfdwgCreator.OutputFileTypeOption.Dwg;
        dxfdwgCreator1.ObjectTypes.Curves = true;
        dxfdwgCreator1.ObjectTypes.Annotations = true;
        dxfdwgCreator1.ObjectTypes.Structures = true;
        dxfdwgCreator1.FlattenAssembly = false;
        dxfdwgCreator1.ExportData = DxfdwgCreator.ExportDataOption.Drawing;
        dxfdwgCreator1.InputFile = part.FullPath;
        dxfdwgCreator1.ProcessHoldFlag = true;
        dxfdwgCreator1.OutputFile = filePath;
        dxfdwgCreator1.WidthFactorMode = DxfdwgCreator.WidthfactorMethodOptions.AutomaticCalculation;
        dxfdwgCreator1.LayerMask = "1-256";
        dxfdwgCreator1.DrawingList = drawingSheetName;
        dxfdwgCreator1.Commit();
    }

    string switchFilePath = filePath.Replace(".dwg", ".log");

    if (File.Exists(switchFilePath))
        File.Delete(switchFilePath);
}

  public static void Pdf(Part part, string drawingSheetName, string filePath)
  {
      string directory = Path.GetDirectoryName(filePath);

      if (!filePath.EndsWith(".pdf"))
          throw new InvalidOperationException("File path for PDF must end with \".pdf\".");

      if (File.Exists(filePath))
          throw new ArgumentOutOfRangeException("output_path", "PDF \"" + filePath + "\" already exists.");

      //We can use SingleOrDefault here because NX will prevent the naming of two drawing sheets the exact same string.
      DrawingSheet sheet = part.DrawingSheets
                               .ToArray()
                               .SingleOrDefault(drawingSheet => drawingSheet.Name == drawingSheetName)
                           ??
                           throw new ArgumentException(
                               $@"Part ""{part.Leaf}"" does not have a sheet named ""{drawingSheetName}"".",
                               "drawingSheetName");

      __display_part_ = part;
      session_.__SetDisplayToWork();
      SetLayers();

      PrintPDFBuilder pdfBuilder = part.PlotManager.CreatePrintPdfbuilder();

      using (session_.__UsingBuilderDestroyer(pdfBuilder))
      {
          pdfBuilder.Scale = 1.0;
          pdfBuilder.Size = PrintPDFBuilder.SizeOption.ScaleFactor;
          pdfBuilder.OutputText = PrintPDFBuilder.OutputTextOption.Polylines;
          pdfBuilder.Units = PrintPDFBuilder.UnitsOption.English;
          pdfBuilder.XDimension = 8.5;
          pdfBuilder.YDimension = 11.0;
          pdfBuilder.RasterImages = true;
          pdfBuilder.Colors = PrintPDFBuilder.Color.BlackOnWhite;
          pdfBuilder.Watermark = "";
          UFSession.GetUFSession().Draw.IsObjectOutOfDate(sheet.Tag, out bool flag);

          if (flag)
          {
              UFSession.GetUFSession().Draw.UpdOutOfDateViews(sheet.Tag);
              part.__Save();
          }
          
          sheet.Open();
          pdfBuilder.SourceBuilder.SetSheets(new NXObject[] { sheet });
          pdfBuilder.Filename = filePath;
          pdfBuilder.Commit();
      }
  }

    public static void Iges(string partPath, string igesPath, bool wait)
  {
      try
      {
          if (File.Exists(igesPath))
              throw new ArgumentException(@"Path for iges file already exists.", nameof(igesPath));

          IgesCreator igesCreator = Session.GetSession().DexManager.CreateIgesCreator();

          using (session_.__UsingBuilderDestroyer(igesCreator))
          {
              igesCreator.ExportModelData = true;
              igesCreator.ExportFrom = IgesCreator.ExportFromOption.ExistingPart;
              igesCreator.ObjectTypes.Curves = true;
              igesCreator.ObjectTypes.Surfaces = true;
              igesCreator.ObjectTypes.Annotations = true;
              igesCreator.ObjectTypes.Structures = true;
              igesCreator.ObjectTypes.Solids = true;
              igesCreator.SettingsFile = "C:\\Program Files\\Siemens\\NX 11.0\\iges\\igesexport.def";
              igesCreator.ExportDrawings = true;
              igesCreator.InputFile = partPath;
              igesCreator.OutputFile = igesPath;
              igesCreator.FileSaveFlag = false;
              igesCreator.LayerMask = "1-256";
              igesCreator.DrawingList = "";
              igesCreator.ViewList = "Top,Front,Right,Back,Bottom,Left,Isometric,Trimetric,User Defined";
              igesCreator.ProcessHoldFlag = wait;
              igesCreator.Commit();
          }

          if (wait)
              print(File.Exists(igesPath)
                  ? $"Successfully created \"{igesPath}\"."
                  : $"Unsuccessfully created \"{igesPath}\".");
      }
      catch (Exception ex)
      {
          ex.__PrintException("Error when creating Iges file for " + partPath);
      }
  }


 // The regular expression to match the proposal folders.
 public const string ufunc_proposal_data_wizard_ProposalRegex = "^[0-9]{4}-[0-9]{2}-[0-9]{2}-p(?<proposalLevel>[0-9]+)(?:-proposal-data)*$";

 // The regular expression to match the part number with a trailing date.        
 public const string ufunc_proposal_data_wizard_PartNumberWithDateRegex =
     @"^(TSG|R)\d+([ps][0-9]+)?[-\s_](?<partNumber>.+)[-\s_][0-9]{4}[-\s_][0-9]{1,2}[-\s_][0-9]{1,2}.*$";

 // The regular expression to match the TSG\R level of a part.
 public const string ufunc_proposal_data_wizard_RLevel = "^(?<identifier>TSG|R)(?<level>\\d+).+";



// Propsal Data
  public static void Step(string partPath, string stepPath, bool wait)
 {
     try
     {
         if (partPath == null)
             throw new ArgumentNullException(nameof(partPath));

         if (stepPath == null)
             throw new ArgumentNullException(nameof(stepPath));

         if (!File.Exists(partPath))
             throw new ArgumentException(@"Path to part does not exist.", nameof(partPath));

         if (File.Exists(stepPath))
             throw new ArgumentException(@"Path for Step file already exists.", nameof(stepPath));


         Session.UndoMarkId undoMarkId1 = session_.SetUndoMark(0, "Start");
         StepCreator stepCreator = session_.DexManager.CreateStepCreator();
         stepCreator.ExportAs = (StepCreator.ExportAsOption)1;
         stepCreator.ExportFrom = (StepCreator.ExportFromOption)1;
         stepCreator.ObjectTypes.Solids = true;
         stepCreator.InputFile = partPath;
         stepCreator.OutputFile = stepPath;
         session_.SetUndoMarkName(undoMarkId1, "Export to STEP Options Dialog");
         stepCreator.SettingsFile = "U:\\nxFiles\\Step Translator\\214ug.def";
         stepCreator.ObjectTypes.Curves = true;
         stepCreator.ObjectTypes.Surfaces = true;
         stepCreator.ObjectTypes.Solids = true;
         session_.DeleteUndoMark(session_.SetUndoMark((Session.MarkVisibility)1, "Export to STEP Options"),
             null);
         Session.UndoMarkId undoMarkId2 =
             session_.SetUndoMark((Session.MarkVisibility)1, "Export to STEP Options");
         stepCreator.FileSaveFlag = false;
         stepCreator.ProcessHoldFlag = wait;
         stepCreator.LayerMask = "1-256";
         stepCreator.Commit();
         session_.DeleteUndoMark(undoMarkId2, null);

         if (wait)
             print(File.Exists(stepPath)
                 ? $"Successfully created \"{stepPath}\"."
                 : $"Unsuccessfully created \"{stepPath}\".");
     }
     catch (Exception ex)
     {
         ex.__PrintException("Error when creating Step file for " + partPath);
     }
 }



 public static void Step(string partPath, string dwgPath)
 {
     try
     {
         if (!File.Exists(partPath))
             throw new ArgumentException(@"Path to part does not exist.", nameof(partPath));

         if (File.Exists(dwgPath))
             throw new ArgumentException(@"Path for Step file already exists.", nameof(dwgPath));

         if (File.Exists(dwgPath))
             throw new ArgumentException(@"Path for Step file already exists.", nameof(dwgPath));

         StepCreator stepCreator1 = session_.DexManager.CreateStepCreator();
         stepCreator1.ExportAs = StepCreator.ExportAsOption.Ap214;
         stepCreator1.ExportFrom = StepCreator.ExportFromOption.ExistingPart;
         stepCreator1.ObjectTypes.Solids = true;
         stepCreator1.InputFile = partPath;
         stepCreator1.OutputFile = dwgPath;
         stepCreator1.ObjectTypes.Curves = true;
         stepCreator1.ObjectTypes.Surfaces = true;
         stepCreator1.ObjectTypes.Solids = true;
         stepCreator1.FileSaveFlag = false;
         stepCreator1.ProcessHoldFlag = true;
         stepCreator1.LayerMask = "1-256";
         stepCreator1.Commit();
     }
     catch (Exception ex)
     {
         ex.__PrintException("Error when creating Step file for " + partPath);
     }
 }

 public static void Iges(string newPartFile, string igesPath)
 {
     try
     {
         IgesCreator igesCreator = Session.GetSession().DexManager.CreateIgesCreator();
         igesCreator.ExportModelData = true;
         igesCreator.ExportDrawings = true;
         igesCreator.MapTabCylToBSurf = true;
         igesCreator.BcurveTol = 0.050799999999999998;
         igesCreator.IdenticalPointResolution = 0.001;
         igesCreator.MaxThreeDMdlSpace = 10000.0;
         igesCreator.ObjectTypes.Curves = true;
         igesCreator.ObjectTypes.Surfaces = true;
         igesCreator.ObjectTypes.Annotations = true;
         igesCreator.ObjectTypes.Structures = true;
         igesCreator.ObjectTypes.Solids = true;
         igesCreator.ExportFrom = IgesCreator.ExportFromOption.ExistingPart;
         igesCreator.SettingsFile = "C:\\Program Files\\Siemens\\NX 11.0\\iges\\igesexport.def";
         igesCreator.MaxLineThickness = 2.0;
         igesCreator.SysDefmaxThreeDMdlSpace = true;
         igesCreator.SysDefidenticalPointResolution = true;
         igesCreator.InputFile = newPartFile;
         igesCreator.OutputFile = igesPath;
         igesCreator.FileSaveFlag = false;
         igesCreator.LayerMask = "1-256";
         igesCreator.DrawingList = "";
         igesCreator.ViewList = "Top,Front,Right,Back,Bottom,Left,Isometric,Trimetric,User Defined";
         igesCreator.ProcessHoldFlag = false;
         igesCreator.Commit();
         igesCreator.Destroy();
     }
     catch (Exception ex)
     {
         ex.__PrintException("Error when creating Iges file for " + igesPath);
     }
 }

  public static object[] ComboOperationItems()
 {
     return new object[]
     {
         "b", "d1",
         "d2", "d3",
         "d4", "d5",
         "d6", "d7",
         "d8", "d9",
         "d10", "d11",
         "d12", "d13",
         "d14", "d15",
         "d16", "RefData",
         "MidSurfCurve", "t1",
         "t2", "t3",
         "t4", "t5",
         "t6", "t7",
         "t8", "t9",
         "t10", "t11",
         "t12", "t13",
         "t14", "t15",
         "t16", "Unfold"
     };
 }

 public static object[] ComboSurfaceItems()
 {
     return new object[] { "lwr", "upr", "Pad Profile" };
 }

 public static object[] ComboVersionItems()
 {
     List<object> list = new List<object>();

     for (int index = 1; index <= 999; index++)
         list.Add($"v{(index > 9 ? index + "" : $"0{index}")}");

     return list.ToArray();
 }

 public static object[] ComboToolSideItems()
 {
     return new object[] { "lwr", "upr", "post", "pad", "punch", "lifter" };
 }

  public class SimDataDeletion
 {
     public const string _simActive = "P:\\CTS_SIM\\Active";
 }
